import math
from math import sqrt
import numbers

def zeroes(height, width):
        """
        Creates a matrix of zeroes.
        """
        g = [[0 for _ in range(width)] for __ in range(height)]
        return Matrix(g)

def identity(n):
        """
        Creates a n x n identity matrix.
        """
        I = zeroes(n, n)
        for i in range(n):
            I.g[i][i] = 1.0
        return I

class Matrix(object):

    # Constructor
    def __init__(self, grid):
        self.g = grid
        self.h = len(grid)
        self.w = len(grid[0])

    #
    # Primary matrix math methods
    #############################
 
    def determinant(self):
        """
        Calculates the determinant of a 1x1 or 2x2 matrix.
        """
        if not self.is_square():
            raise(ValueError, "Cannot calculate determinant of non-square matrix.")
        if self.h > 2:
            raise(NotImplementedError, "Calculating determinant not implemented for matrices largerer than 2x2.")
        if self.w == 1:
            row1=self.g[0]
            return row1[0]
        if self.w == 2:
            row1=self.g[0]
            row2=self.g[1]
            determinant=row1[0]*row2[1] - row1[1]*row2[0]
            return determinant
          

    def trace(self):
        """
        Calculates the trace of a matrix (sum of diagonal entries).
        """
        if not self.is_square():
            raise(ValueError, "Cannot calculate the trace of a non-square matrix.")
        trace=0
        for i in range (self.h):
            for j in range (self.w):
                if (i==j):
                    row=self.g
                    trace=trace+row[i][i]
        return trace            

    def inverse(self):
        """
        Calculates the inverse of a 1x1 or 2x2 Matrix.
        """
        if not self.is_square():
            raise(ValueError, "Non-square Matrix does not have an inverse.")
        if self.h > 2:
            raise(NotImplementedError, "inversion not implemented for matrices larger than 2x2.")
        if self.w == 1:
            row1=self.g[0]
            return 1/row1[0]
        if self.w == 2:
            det=self.determinant()
            trace=self.trace()
            I=identity(self.w)
            A=self
            inv=trace*I - A
            for i in range (self.h):
                for j in range (self.w):
                    inv[i][j]=(1/det)*inv[i][j]
            return inv
            

    def T(self):
        """
        Returns a transposed copy of this Matrix.
        """
        c=zeroes(self.h,self.w)
        for i in range (self.h):
            for j in range (self.w):
                c[i][j]=self[i][j]
        for i in range (self.h):
            for j in range (self.w):
                if (i!=j):
                    self.g[i][j]=c.g[j][i]
        return self          
        

    def is_square(self):
        return self.h == self.w

    #
    # Begin Operator Overloading
    ############################
    def __getitem__(self,idx):
        """
        Defines the behavior of using square brackets [] on instances
        of this class.

        Example:

        > my_matrix = Matrix([ [1, 2], [3, 4] ])
        > my_matrix[0]
          [1, 2]

        > my_matrix[0][0]
          1
        """
        return self.g[idx]

    def __repr__(self):
        """
        Defines the behavior of calling print on an instance of this class.
        """
        s = ""
        for row in self.g:
            s += " ".join(["{} ".format(x) for x in row])
            s += "\n"
        return s

    def __add__(self,other):
        """
        Defines the behavior of the + operator
        """
        if self.h != other.h or self.w != other.w:
            raise(ValueError, "Matrices can only be added if the dimensions are the same") 
        c=zeroes(self.h, self.w)
        for i in range (self.h):
            row1=self.g[i]
            row2=other.g[i]
            row=c.g[i]
            for j in range (self.w):
                row[j]=row1[j]+row2[j]
        return c        
                

    def __neg__(self):
        """
        Defines the behavior of - operator (NOT subtraction)

        Example:

        > my_matrix = Matrix([ [1, 2], [3, 4] ])
        > negative  = -my_matrix
        > print(negative)
          -1.0  -2.0
          -3.0  -4.0
        """
        for i in range (self.h):
            row=self.g[i]
            for j in range (self.w):
                row[j]=-row[j]
        return self
        

    def __sub__(self, other):
        """
        Defines the behavior of - operator (as subtraction)
        """
        if self.h != other.h or self.w != other.w:
            raise(ValueError, "Matrices can only be substracted if the dimensions are the same") 
        c=zeroes(self.h, self.w)
        for i in range (self.h):
            row1=self.g[i]
            row2=other.g[i]
            row=c.g[i]
            for j in range (self.w):
                row[j]=row1[j]-row2[j]
        return c 
        

    def __mul__(self, other):
        """
        Defines the behavior of * operator (matrix multiplication)
        """
        if self.w != other.h:
            raise(ValueError, "Matrices can only be multiplied nxm mxk")
        c=zeroes(self.h,other.w)
        for i in range (self.h):
            for j in range (other.w):
                for k in range (self.w):
                    c[i][j]=c[i][j]+self[i][k]*other[k][j]
        return c
        

    def __rmul__(self, other):
        """
        Called when the thing on the left of the * is not a matrix.

        Example:

        > identity = Matrix([ [1,0], [0,1] ])
        > doubled  = 2 * identity
        > print(doubled)
          2.0  0.0
          0.0  2.0
        """
        if isinstance(other, numbers.Number):
            pass
            for i in range (self.h):
                for j in range (self.w):
                    self[i][j]=self[i][j]*other
        return self      
                    
            